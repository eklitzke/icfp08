Our entry is written in Python; it is modeled as a simple event loop +
scheduler.

There are a couple of registered callbacks for dealing with data from the
server. The controller can also register functions to be called in the future.
For example, when figuring out how to turn, the client calculates its desired
turn angle and then calculates the estimated time to turn that angle (based on
whether the turn is a soft/hard turn). If the amount of time needed to turn is
less than the predicted time for the next telemetry update then an event will
be schedule to "unturn" in the future. The system is "tickless" in the sense
that it only wakes up to call scheduled events and when it receives messages.

Steering is pretty simple. At each telemetry update the controller tries to
pick the angle that steers the rover closest to the home base while avoiding
nearby obstacles (craters, boulders, or martians). There is some special logic
for steering the client when it is very close to the home base (40 meters or
so) to improve the hit accuracy.

The rover will almost always be accelerating except when making hard turns,
when it may transition into a rolling or braking state.
