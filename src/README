Our entry is written in Python; it is modeled as a simple event loop +
scheduler.

There are a couple of registered callbacks for dealing with data from the
server. The controller can also register functions to be called in the future.
For example, when figuring out how to turn, the client calculates its desired
turn angle and then calculates the estimated time to turn that angle (based on
whether the turn is a soft/hard turn). If the amount of time needed to turn is
less than the predicted time for the next telemetry update then an event will
be schedule to "unturn" in the future. The system is "tickless" in the sense
that it only wakes up to call scheduled events and when it receives messages.

The steering logic has been encapsulated into what we call strategies. The
strategies can be found in the file strategies.py. In short, to write a
strategy you write a function that takes as input the rover object and returns
an angle to steer the rover to. By decorating this function with the
steer_rover function you'll get a new function that can be called by the
controller to steer the rover. It's possible to switch strateies on the fly.

The rover will almost always be accelerating except when making hard turns,
when it may transition into a rolling or braking state.

Our team is named in honor of the best lunch spot in SOMA[1]; it also doubles
as the backronym "Making Everyone Here Fear Imperative Languages".

[1] http://www.yelp.com/biz/mehfil-indian-cuisine-san-francisco
